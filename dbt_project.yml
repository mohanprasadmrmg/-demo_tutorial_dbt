
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'nitor_demo_dbt'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'snowflake'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.


on-run-start: "insert into hook_dbt(pre_post) values('its pre hook call'); commit;"             
on-run-end: "insert into hook_dbt(pre_post) values('its post hook call'); commit;"

# on run start and on run end hooks told to define in project yml file as per doc 
#pre and post hook can use to define in sql models 
#on-run-end: "truncate DBT.DBT_DEMOS.COUNTRY_CODES; commit;"
#on-run-end: "{{ grant_select1() }}"
models:
  nitor_demo_dbt:
     example:
      +materialized: view
      #+schema: 'new_schema_from_dbt'


#on-run-end:
#on-run-end: "grant usage on schema DBT_DEMOS to role ANALYST;commit;"
#on-run-end: "grant usage on schema {{ target.schema }} to role {{ ANALYST }};commit"
#on-run-end: "grant usage on all tables in schema  DBT.DBT_DEMOS to role ANALYST;commit;" 
#on-run-end: "grant usage on all tables in view DBT.DBT_DEMOS to role ANALYST;commit;" 
#on-run-end: "insert into hook_dbt(pre_post) values('its post hook call'); commit;"
#after nitor_demodbt
# Config indicated by + and applies to all files under models/example/
#pre_hook=: "insert into hook_dbt(pre_post) values('fact_customer_oredr1')";commit
#post_hook=: "insert into hook_dbt(pre_post) values('fact_customer_oredr2')";commit
#pre_hook=: "{{hook_test(model_run)}}"
#post_hook=: "{{hook_test(model_end)}}" 



     
    
     




